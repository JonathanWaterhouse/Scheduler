/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package scheduler;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;

/**
 * This Program sets up and calculates the contents of a schedule using schedule
 * constraints specified (such as person cannot be scheduled when on holiday, 
 * person can be scheduled when assigned to a task, person cannot be scheduled
 * too often.
 * 

 * @author Jon Waterhouse
 */
public class Ui extends javax.swing.JFrame {   
    /**
     * output is defined as interface OutputArea and is instantiated in the 
     * constructor as a specific object which implements the interface and is 
     * defined according to the nature of the output area component which is part
     * of Ui.
     */
    private OutputArea output;
    /**
     * Creates new form Ui
     */    
    public Ui() {
        initComponents();
        output = new JTableOutputArea(outputJTable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        displayScheduleButton = new javax.swing.JButton();
        displayTasksButton = new javax.swing.JButton();
        initialiseScheduleButton = new javax.swing.JButton();
        Exit = new javax.swing.JButton();
        calculateScheduleButton = new javax.swing.JButton();
        displayTaskDatesButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputJTable = new javax.swing.JTable();
        transposeJCheckBox = new javax.swing.JCheckBox();
        displayScheduleJButton = new javax.swing.JButton();
        changeScheduleJButton = new javax.swing.JButton();
        auditScheduleJButton = new javax.swing.JButton();
        initSchedAutoEntriesJButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        setMasterDataMenuItem = new javax.swing.JMenuItem();
        setTaskDatesMenuItem = new javax.swing.JMenuItem();
        setAssignmentsMenuItem = new javax.swing.JMenuItem();
        setHolidaysMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        documentationMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Schedule");

        displayScheduleButton.setText("Initialise Schedule");
        displayScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initialiseScheduleAction(evt);
            }
        });

        displayTasksButton.setText("Display Holidays");
        displayTasksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayHolidaysAction(evt);
            }
        });

        initialiseScheduleButton.setText("Display Assignm'ts");
        initialiseScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayTasksAction(evt);
            }
        });

        Exit.setForeground(new java.awt.Color(255, 0, 51));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        calculateScheduleButton.setText("Calculate Schedule");
        calculateScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateScheduleButtonActionPerformed(evt);
            }
        });

        displayTaskDatesButton.setText("Display Task dates");
        displayTaskDatesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayTaskDatesButtonActionPerformed(evt);
            }
        });

        outputJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                ""
            }
        ));
        outputJTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        outputJTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        outputJTable.setFocusable(false);
        outputJTable.setRowSelectionAllowed(false);
        outputJTable.setSurrendersFocusOnKeystroke(true);
        outputJTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(outputJTable);
        outputJTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        transposeJCheckBox.setText("Transpose Output");

        displayScheduleJButton.setText("Display Schedule");
        displayScheduleJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayScheduleJButtonActionPerformed(evt);
            }
        });

        changeScheduleJButton.setText("Change Schedule");
        changeScheduleJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeScheduleJButtonActionPerformed(evt);
            }
        });

        auditScheduleJButton.setText("Audit Schedule");
        auditScheduleJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                auditScheduleJButtonActionPerformed(evt);
            }
        });

        initSchedAutoEntriesJButton.setText("Init Sched Auto Entries");
        initSchedAutoEntriesJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initSchedAutoEntriesJButtonActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        setMasterDataMenuItem.setMnemonic('s');
        setMasterDataMenuItem.setText("Set People");
        setMasterDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setMasterDataMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(setMasterDataMenuItem);

        setTaskDatesMenuItem.setText("Set Task Dates");
        setTaskDatesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTaskDatesMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(setTaskDatesMenuItem);

        setAssignmentsMenuItem.setLabel("Set Assignments");
        setAssignmentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAssignmentsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(setAssignmentsMenuItem);

        setHolidaysMenuItem.setLabel("Set Holidays");
        setHolidaysMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setHolidaysMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(setHolidaysMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        documentationMenuItem.setMnemonic('c');
        documentationMenuItem.setText("Documentation");
        documentationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                documentationMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(documentationMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(changeScheduleJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(displayScheduleJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(calculateScheduleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(displayScheduleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(initialiseScheduleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(displayTasksButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(displayTaskDatesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(transposeJCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Exit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(auditScheduleJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(initSchedAutoEntriesJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(displayTaskDatesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayTasksButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(initialiseScheduleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayScheduleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calculateScheduleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayScheduleJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(changeScheduleJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(auditScheduleJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(initSchedAutoEntriesJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(transposeJCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Exit))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void initialiseScheduleAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initialiseScheduleAction
        Schedule sdb = new Schedule();
        ScheduleArray s = sdb.getSchedule();
        s.initialise(sdb.getTaskDates()); //initialise schedule with tasks and dates but no assignments
        sdb.setSchedule(s);
        //Display new schedule
        if (transposeJCheckBox.isSelected()) output.print(sdb.getSchedule().getSchedule().transpose());
        else output.print(sdb.getSchedule().getSchedule());
    }//GEN-LAST:event_initialiseScheduleAction

    private void displayHolidaysAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayHolidaysAction
        Schedule sdb = new Schedule();
        if (transposeJCheckBox.isSelected()) output.print(sdb.getHolidays().transpose());
        else output.print(sdb.getHolidays());
    }//GEN-LAST:event_displayHolidaysAction

    private void displayTasksAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayTasksAction
        Schedule sdb = new Schedule();
        if (transposeJCheckBox.isSelected()) output.print(sdb.getAssignments().transpose());
        else output.print(sdb.getAssignments());
    }//GEN-LAST:event_displayTasksAction

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(getContentPane(),"Copyright Jon Waterhouse, 2012");
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void setMasterDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setMasterDataMenuItemActionPerformed
        PeopleDialog dialog = new PeopleDialog(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_setMasterDataMenuItemActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void setHolidaysMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setHolidaysMenuItemActionPerformed
        HolTaskDialog dialog;
        dialog = new HolTaskDialog(this, true,"Holidays");
        dialog.setVisible(true);
    }//GEN-LAST:event_setHolidaysMenuItemActionPerformed

    private void setAssignmentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAssignmentsMenuItemActionPerformed
        HolTaskDialog dialog;
        dialog = new HolTaskDialog(this, true,"Assignments");
        dialog.setVisible(true);
    }//GEN-LAST:event_setAssignmentsMenuItemActionPerformed

    private void calculateScheduleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateScheduleButtonActionPerformed
        Schedule sdb = new Schedule();
        ScheduleArray s = sdb.getSchedule();
        flex2DArray taskDates = sdb.getTaskDates();
        TreeSet<String> dates = taskDates.getColKeys();
        TreeSet<String> tasks = taskDates.getRowKeys();
        ArrayList<String> people = sdb.getPeople();
        flex2DArray holidays = sdb.getHolidays();
        flex2DArray assignments = sdb.getAssignments();
        ArrayList<abstractConstraint> constraints = new ArrayList();
        //Add the constraints in the order we want to evaluate them
        constraints.add(0, new taskConstraint(assignments)); // Is person assigned to task
        constraints.add(1, new TaskScheduledConstraint(taskDates)); //Is task scheduled on date
        constraints.add(2,new holConstraint(holidays)); // Is person on holiday
        constraints.add(3, new AlreadyScheduledConstraint());//Was person assigned anything else today
        constraints.add(4, new RepeatConstraint()); //Did person do same task recently
        constraints.add(5, new MinimumUseConstraint()); //Ensure that only the least scheduled person is chosen after all other constraints applied
        s.calculate(constraints,dates,tasks,people);
        sdb.setSchedule(s);
        //Display new schedule
        if (transposeJCheckBox.isSelected()) output.print(s.getSchedule().transpose());
        else output.print(s.getSchedule());
    }//GEN-LAST:event_calculateScheduleButtonActionPerformed

    private void setTaskDatesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setTaskDatesMenuItemActionPerformed
        TaskDialog dialog = new TaskDialog(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_setTaskDatesMenuItemActionPerformed

    private void displayTaskDatesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayTaskDatesButtonActionPerformed
        //Display taskDates
        Schedule sdb = new Schedule();
        if (transposeJCheckBox.isSelected()) output.print(sdb.getTaskDates().transpose());
        else output.print(sdb.getTaskDates());
    }//GEN-LAST:event_displayTaskDatesButtonActionPerformed

    private void displayScheduleJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayScheduleJButtonActionPerformed
        Schedule sdb = new Schedule();
        if (transposeJCheckBox.isSelected()) output.print(sdb.getSchedule().getSchedule().transpose());
        else output.print(sdb.getSchedule().getSchedule());
    }//GEN-LAST:event_displayScheduleJButtonActionPerformed

    private void changeScheduleJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeScheduleJButtonActionPerformed
        ChangeSchedule dialog = new ChangeSchedule(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_changeScheduleJButtonActionPerformed

    private void auditScheduleJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_auditScheduleJButtonActionPerformed
        Schedule sdb = new Schedule();
        output.print(sdb.auditSchedule());
    }//GEN-LAST:event_auditScheduleJButtonActionPerformed

    private void initSchedAutoEntriesJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initSchedAutoEntriesJButtonActionPerformed
        Schedule sdb = new Schedule();
        ScheduleArray s = sdb.getSchedule();
        flex2DArray sched = s.getSchedule();
        flex2DArray schedOverride = s.getScheduleOverride();
        for (String date : sched.getRowKeys()){
            for (String task : sched.getColKeys()){
                if (!schedOverride.getCellContentAtKey(date, task).equals("Y"))
                    sched.add(date, task, "");
            }
        }
        s.setSchedule(sched);
        sdb.setSchedule(s);
        //Display new schedule
        if (transposeJCheckBox.isSelected()) output.print(sdb.getSchedule().getSchedule().transpose());
        else output.print(sdb.getSchedule().getSchedule());
    }//GEN-LAST:event_initSchedAutoEntriesJButtonActionPerformed

    private void documentationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_documentationMenuItemActionPerformed
        JOptionPane.showMessageDialog(getContentPane(),"Manual available at https://sites.google.com/site/schedulerdocumentation/home");
    }//GEN-LAST:event_documentationMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Ui().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Exit;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton auditScheduleJButton;
    private javax.swing.JButton calculateScheduleButton;
    private javax.swing.JButton changeScheduleJButton;
    private javax.swing.JButton displayScheduleButton;
    private javax.swing.JButton displayScheduleJButton;
    private javax.swing.JButton displayTaskDatesButton;
    private javax.swing.JButton displayTasksButton;
    private javax.swing.JMenuItem documentationMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton initSchedAutoEntriesJButton;
    private javax.swing.JButton initialiseScheduleButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTable outputJTable;
    private javax.swing.JMenuItem setAssignmentsMenuItem;
    private javax.swing.JMenuItem setHolidaysMenuItem;
    private javax.swing.JMenuItem setMasterDataMenuItem;
    private javax.swing.JMenuItem setTaskDatesMenuItem;
    private javax.swing.JCheckBox transposeJCheckBox;
    // End of variables declaration//GEN-END:variables
}
