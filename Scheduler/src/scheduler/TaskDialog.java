/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package scheduler;

import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.TreeSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class TaskDialog extends javax.swing.JDialog {
    private flex2DArray taskDates;
    private Schedule sdb;
    /**
     * Creates new form MasterDataDialog
     */   
    public TaskDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        // Some application specific initialisations
        sdb = new Schedule();
        taskDates = sdb.getTaskDates();
        // Task jTable initialise
        DefaultTableModel TM = new DefaultTableModel(taskDates.getRowKeys().size()+1,0);
        TM.addColumn("Tasks", taskDates.getRowKeys().toArray());
        taskJTable.setModel(TM); 
        // Dates combo box initialise
        datesComboBox.removeAllItems();
        try{
            datesComboBox.removeAllItems();
            String task = (String) TM.getValueAt(0,0);  
            TreeSet<String> datesAtTask = taskDates.getColKeysForRow(task, "Y");
            for (String d : datesAtTask){datesComboBox.addItem(d);}
        }
        catch(NullPointerException e){
            //taskDates is not yet initialised so set everything blank
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taskJTable = new javax.swing.JTable();
        datesPanel = new javax.swing.JPanel();
        datesComboBox = new javax.swing.JComboBox();
        dateChooser = new com.toedter.calendar.JDateChooser();
        repeatsCheckBox = new javax.swing.JCheckBox();
        repeatIntervalComboBox = new javax.swing.JComboBox();
        repeatsEvery = new javax.swing.JLabel();
        repeatPeriodComboBox = new javax.swing.JComboBox();
        repeatInterval = new javax.swing.JLabel();
        untilDateChooser = new com.toedter.calendar.JDateChooser();
        allLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        removeButton = new javax.swing.JButton();
        allCheckBox = new javax.swing.JCheckBox();
        closeDialogButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Master Data");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Task", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        taskJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        taskJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                taskJTableMouseClicked(evt);
            }
        });
        taskJTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                taskJTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(taskJTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 23, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        datesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Date Selections", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        repeatsCheckBox.setText("Repeats?");

        repeatIntervalComboBox.setMaximumRowCount(20);
        repeatIntervalComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));

        repeatsEvery.setText("Repeats Every");

        repeatPeriodComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Daily", "Weekly", "Monthly", "Yearly" }));
        repeatPeriodComboBox.setSelectedIndex(1);

        repeatInterval.setText("Repeat Period");

        allLabel.setText("Until");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Add Date(s) for task");
        jLabel1.setFocusable(false);

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        allCheckBox.setText(" All Dates?");
        allCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout datesPanelLayout = new javax.swing.GroupLayout(datesPanel);
        datesPanel.setLayout(datesPanelLayout);
        datesPanelLayout.setHorizontalGroup(
            datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datesPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(datesPanelLayout.createSequentialGroup()
                        .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(datesPanelLayout.createSequentialGroup()
                                .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(untilDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(datesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(14, 14, 14))
                            .addGroup(datesPanelLayout.createSequentialGroup()
                                .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(repeatPeriodComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(repeatIntervalComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)))
                        .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(repeatsCheckBox)
                            .addGroup(datesPanelLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(repeatsEvery)
                                    .addComponent(allLabel)
                                    .addComponent(repeatInterval)))))
                    .addGroup(datesPanelLayout.createSequentialGroup()
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addGroup(datesPanelLayout.createSequentialGroup()
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(allCheckBox))))
        );
        datesPanelLayout.setVerticalGroup(
            datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datesPanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(datesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(datesPanelLayout.createSequentialGroup()
                        .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(repeatsCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(untilDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(allLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(repeatIntervalComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(repeatsEvery))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(repeatPeriodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(repeatInterval))
                .addGap(42, 42, 42)
                .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeButton)
                    .addComponent(allCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        closeDialogButton.setForeground(new java.awt.Color(255, 0, 51));
        closeDialogButton.setText("Close");
        closeDialogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeDialogButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(closeDialogButton)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(datesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(datesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeDialogButton)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // What tasks selected in jTable?
        ArrayList<String> tasksSelected  = new ArrayList();
        DefaultTableModel TM = (DefaultTableModel) taskJTable.getModel();
        int numRows = taskJTable.getSelectedRowCount();
        int[] rows = new int[numRows];
        rows = taskJTable.getSelectedRows(); 
        for (int i = 0; i < numRows; i++) {
            String task = (String) TM.getValueAt(rows[i],0);
            tasksSelected.add(task) ;
        }
        if (tasksSelected.size() == 0){
                JOptionPane.showMessageDialog(getContentPane(),"Please select an existing or add a new task.");
                return;
        }
        // Loop over each of selected tasks and set up with the selected dates.
        for (String task : tasksSelected){
            if (task == null || task == "") continue;
             //Now look at the dates
            SimpleDateFormat df = (SimpleDateFormat) SimpleDateFormat.getDateInstance(DateFormat.MEDIUM);
            df.applyPattern("yyyy-MM-dd E"); 
            String dt;
            Date newDate = dateChooser.getDate();
            // Did we select any dates? If not output msg to add some
            try {
                df.format(newDate);
            }
            catch (NullPointerException e){
                JOptionPane.showMessageDialog(getContentPane(),"Please add date(s) valid for the task.");
                return;
            }
            //If we did select some dates for the task figure out which ones taking into
            //account repeated weekly dates etc.
            if (!repeatsCheckBox.isSelected()){   
                dt = df.format(newDate);
                taskDates.add(task, dt, "Y");
                //Preferences.addFlex2DArray(Preferences.TASK_DATE_FILE, taskDates);
                datesComboBox.addItem(dt);
            }
            else{
                Date untilDate = untilDateChooser.getDate();
                Calendar cal = Calendar.getInstance();
                Calendar untilCal = Calendar.getInstance();
                cal.setTime(newDate);
                untilCal.setTime(untilDate);
                String period = (String) repeatPeriodComboBox.getSelectedItem();
                int interval = Integer.parseInt((String) repeatIntervalComboBox.getSelectedItem());
                while (cal.before(untilCal)){
                    dt = df.format(cal.getTime());
                    taskDates.add(task, dt, "Y");
                    datesComboBox.addItem(dt);
                    if (period.equals("Daily")){cal.add(Calendar.DAY_OF_MONTH,interval);}
                    else if (period.equals("Weekly")){cal.add(Calendar.WEEK_OF_YEAR,interval);}
                    else if (period.equals("Monthly")){cal.add(Calendar.MONTH,interval);}
                    else if (period.equals("Yearly")){cal.add(Calendar.YEAR,interval);}
                    else {break;}
                }   
            }
            sdb.setTaskDates(taskDates);           
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        //Check a task is selected
        if (taskJTable.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(getContentPane(),"Please select an existing task.");
            return;
        }
        String task;
        DefaultTableModel TM = (DefaultTableModel) taskJTable.getModel();
        task = (String) TM.getValueAt(taskJTable.getSelectedRow(),0);
        if (!allCheckBox.isSelected()){
            String date = (String) datesComboBox.getSelectedItem();
            taskDates.add(task,date,"N"); //Task on date not available
            datesComboBox.removeItem(date);
        }
        else{
            taskDates.deleteRow(task); //Task not available on any date
            datesComboBox.removeAllItems();
            TM.removeRow(taskJTable.getSelectedRow());
        }
        sdb.setTaskDates(taskDates);
    }//GEN-LAST:event_removeButtonActionPerformed

    private void closeDialogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeDialogButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeDialogButtonActionPerformed

    private void taskJTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taskJTableKeyPressed
       // Add an extra line at the end of the table if enter or Tab keys used
        if (evt.getKeyCode() == KeyEvent.VK_ENTER || evt.getKeyCode() == KeyEvent.VK_TAB) {
            DefaultTableModel TM = (DefaultTableModel) taskJTable.getModel();
            if (taskJTable.getSelectedRowCount() == 1){
                int maxRow = TM.getRowCount();
                if (taskJTable.getSelectedRow() == maxRow-1
                        &TM.getValueAt(maxRow-1, 0) != null){
                    String A[] = new String[1];
                    A[0] = "";
                    TM.addRow(A);                      
                }  
            }
        }
    }//GEN-LAST:event_taskJTableKeyPressed

    private void taskJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_taskJTableMouseClicked
        // TODO add your handling code here:
        String task;
        DefaultTableModel TM = (DefaultTableModel) taskJTable.getModel();
        int i;
        try {
            datesComboBox.removeAllItems();
            task = (String) TM.getValueAt(taskJTable.getSelectedRow(),0);  
            TreeSet<String> datesAtTask = taskDates.getColKeysForRow(task, "Y");
            for (String d : datesAtTask){datesComboBox.addItem(d);}
        }
        catch(NullPointerException e){
            //Nothing has been selected
        }           
    }//GEN-LAST:event_taskJTableMouseClicked

    private void allCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_allCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JCheckBox allCheckBox;
    private javax.swing.JLabel allLabel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton closeDialogButton;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JComboBox datesComboBox;
    private javax.swing.JPanel datesPanel;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel repeatInterval;
    private javax.swing.JComboBox repeatIntervalComboBox;
    private javax.swing.JComboBox repeatPeriodComboBox;
    private javax.swing.JCheckBox repeatsCheckBox;
    private javax.swing.JLabel repeatsEvery;
    private javax.swing.JTable taskJTable;
    private com.toedter.calendar.JDateChooser untilDateChooser;
    // End of variables declaration//GEN-END:variables
}
