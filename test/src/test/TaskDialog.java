/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.TreeSet;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class TaskDialog extends javax.swing.JDialog {

    /**
     * Creates new form MasterDataDialog
     */
    
    //private String peopleFile = "people.obj";
    //private String tasksFile = "tasks.obj";
    //private String datesFile = "dates.obj";
    
    public TaskDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        // Some application specific initialisations
        flex2DArray taskDates = Preferences.retrieveFlex2DArray(Preferences.TASK_DATE_FILE);
        itemsComboBox.removeAllItems();
        for (String task : taskDates.getRowKeys()){itemsComboBox.addItem(task);}
        addNewTaskTextField.setText("");
        datesComboBox.removeAllItems();
        try{
            TreeSet<String> datesAtTask = taskDates.getColKeysForRow((String) itemsComboBox.getSelectedItem(), "Y");
            for (String d : datesAtTask){datesComboBox.addItem(d);}
        }
        catch(NullPointerException e){
            //taskDates is not yet initialised so set everything blank
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        itemsComboBox = new javax.swing.JComboBox();
        addNewTaskTextField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        AddNewTaskLabel = new javax.swing.JLabel();
        allCheckBox = new javax.swing.JCheckBox();
        datesPanel = new javax.swing.JPanel();
        datesComboBox = new javax.swing.JComboBox();
        dateChooser = new com.toedter.calendar.JDateChooser();
        repeatsCheckBox = new javax.swing.JCheckBox();
        repeatIntervalComboBox = new javax.swing.JComboBox();
        repeatsEvery = new javax.swing.JLabel();
        repeatPeriodComboBox = new javax.swing.JComboBox();
        repeatInterval = new javax.swing.JLabel();
        untilDateChooser = new com.toedter.calendar.JDateChooser();
        allLabel = new javax.swing.JLabel();
        closeDialogButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Master Data");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Task", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        itemsComboBox.setMaximumRowCount(10);
        itemsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemsComboBoxActionPerformed(evt);
            }
        });

        addNewTaskTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addNewTaskTextFieldMouseClicked(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        AddNewTaskLabel.setText("Add new task");

        allCheckBox.setText(" All?");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(itemsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addNewTaskTextField))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddNewTaskLabel)
                    .addComponent(allCheckBox))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNewTaskTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddNewTaskLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeButton)
                    .addComponent(allCheckBox))
                .addGap(47, 47, 47))
        );

        datesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Date Selections", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        repeatsCheckBox.setText("Repeats?");

        repeatIntervalComboBox.setMaximumRowCount(20);
        repeatIntervalComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));

        repeatsEvery.setText("Repeats Every");

        repeatPeriodComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Daily", "Weekly", "Monthly", "Yearly" }));
        repeatPeriodComboBox.setSelectedIndex(1);

        repeatInterval.setText("Repeat Period");

        allLabel.setText("Until");

        javax.swing.GroupLayout datesPanelLayout = new javax.swing.GroupLayout(datesPanel);
        datesPanel.setLayout(datesPanelLayout);
        datesPanelLayout.setHorizontalGroup(
            datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(datesPanelLayout.createSequentialGroup()
                        .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(untilDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(datesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(14, 14, 14))
                    .addGroup(datesPanelLayout.createSequentialGroup()
                        .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(repeatPeriodComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(repeatIntervalComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)))
                .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(repeatsCheckBox)
                    .addGroup(datesPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(repeatsEvery)
                            .addComponent(allLabel)
                            .addComponent(repeatInterval))))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        datesPanelLayout.setVerticalGroup(
            datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datesPanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(datesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(datesPanelLayout.createSequentialGroup()
                        .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(repeatsCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(untilDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(allLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(repeatIntervalComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(repeatsEvery))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(datesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(repeatPeriodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(repeatInterval))
                .addContainerGap(146, Short.MAX_VALUE))
        );

        closeDialogButton.setForeground(new java.awt.Color(255, 0, 51));
        closeDialogButton.setText("Close");
        closeDialogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeDialogButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(datesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeDialogButton)
                .addGap(57, 57, 57))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(datesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeDialogButton)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        //If something in new item text field add it to task combo Box and select it
        //Otherwise get the task selected 
        Boolean newTask = false;
        String newItem = addNewTaskTextField.getText();
        if (newItem.equals("")){
            if (itemsComboBox.getSelectedIndex() == -1){
                JOptionPane.showMessageDialog(getContentPane(),"Please select an existing or add a new task.");
                return;
            }
            newTask = false; 
        }
        else{
            itemsComboBox.addItem(newItem);
            itemsComboBox.setSelectedItem(newItem);
            newTask = true;
        }
        flex2DArray taskDates = Preferences.retrieveFlex2DArray(Preferences.TASK_DATE_FILE);
        //Now look at the dates
        SimpleDateFormat df = (SimpleDateFormat) SimpleDateFormat.getDateInstance(DateFormat.MEDIUM);
        df.applyPattern("yyyy-MM-dd E"); 
        String dt;
        Date newDate = dateChooser.getDate();
        // Did we select any dates? If not output msg to add some
        try {
            df.format(newDate);
        }
        catch (NullPointerException e){
            JOptionPane.showMessageDialog(getContentPane(),"Please add date(s) valid for the task.");
            return;
        }
        //If we did select some dates for the task figure out which ones taking into
        //acount repeated weekly dates etc.
        String task = (String) itemsComboBox.getSelectedItem();
        if (!repeatsCheckBox.isSelected()){   
            dt = df.format(newDate);
            taskDates.add(task, dt, "Y");
            Preferences.addFlex2DArray(Preferences.TASK_DATE_FILE, taskDates);
            datesComboBox.addItem(dt);
        }
        else{
            Date untilDate = untilDateChooser.getDate();
            Calendar cal = Calendar.getInstance();
            Calendar untilCal = Calendar.getInstance();
            cal.setTime(newDate);
            untilCal.setTime(untilDate);
            String period = (String) repeatPeriodComboBox.getSelectedItem();
            int interval = Integer.parseInt((String) repeatIntervalComboBox.getSelectedItem());
            while (cal.before(untilCal)){
                dt = df.format(cal.getTime());
                taskDates.add(task, dt, "Y");
                Preferences.addFlex2DArray(Preferences.TASK_DATE_FILE, taskDates);
                datesComboBox.addItem(dt);
                if (period.equals("Daily")){cal.add(Calendar.DAY_OF_MONTH,interval);}
                else if (period.equals("Weekly")){cal.add(Calendar.WEEK_OF_YEAR,interval);}
                else if (period.equals("Monthly")){cal.add(Calendar.MONTH,interval);}
                else if (period.equals("Yearly")){cal.add(Calendar.YEAR,interval);}
                else {break;}
            }   
        }
        //Ensure the rest of task dates list reflects any changes ie keep matrix NxM
        //and not NxMANY
        flex2DArray td = taskDates.maintainFlex2DArrayConsistency("N");
        Preferences.addFlex2DArray(Preferences.TASK_DATE_FILE, td);
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TO DO Test it
        flex2DArray taskDates = Preferences.retrieveFlex2DArray(Preferences.TASK_DATE_FILE);
        //Check a task is selected
        if (itemsComboBox.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(getContentPane(),"Please select an existing task.");
            return;
        }
        String task = (String) itemsComboBox.getSelectedItem();
        if (!allCheckBox.isSelected()){
            String date = (String) datesComboBox.getSelectedItem();
            taskDates.add(task,date,"N"); //Task on date not available
            datesComboBox.removeItem(date);
        }
        else{
            taskDates.deleteRow(task); //Task not available on any date
            datesComboBox.removeAllItems();
            itemsComboBox.removeItem(task);
        }
        flex2DArray td = taskDates.maintainFlex2DArrayConsistency("N");
        Preferences.addFlex2DArray(Preferences.TASK_DATE_FILE, td);
    }//GEN-LAST:event_removeButtonActionPerformed

    private void closeDialogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeDialogButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeDialogButtonActionPerformed

    private void addNewTaskTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addNewTaskTextFieldMouseClicked
        addNewTaskTextField.setText("");
    }//GEN-LAST:event_addNewTaskTextFieldMouseClicked

    private void itemsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemsComboBoxActionPerformed
        datesComboBox.removeAllItems();
        flex2DArray taskDates = Preferences.retrieveFlex2DArray(Preferences.TASK_DATE_FILE);
        try{
            TreeSet<String> datesAtTask = taskDates.getColKeysForRow((String) itemsComboBox.getSelectedItem(), "Y");
            for (String d : datesAtTask){datesComboBox.addItem(d);}
        }
        catch(NullPointerException e){
            //taskDates is not yet initialised so set everything blank
        }
    }//GEN-LAST:event_itemsComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AddNewTaskLabel;
    private javax.swing.JButton addButton;
    private javax.swing.JTextField addNewTaskTextField;
    private javax.swing.JCheckBox allCheckBox;
    private javax.swing.JLabel allLabel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton closeDialogButton;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JComboBox datesComboBox;
    private javax.swing.JPanel datesPanel;
    private javax.swing.JComboBox itemsComboBox;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel repeatInterval;
    private javax.swing.JComboBox repeatIntervalComboBox;
    private javax.swing.JComboBox repeatPeriodComboBox;
    private javax.swing.JCheckBox repeatsCheckBox;
    private javax.swing.JLabel repeatsEvery;
    private com.toedter.calendar.JDateChooser untilDateChooser;
    // End of variables declaration//GEN-END:variables
}
