/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;

/**
 * This Program sets up and calculates the contents of a schedule using schedule
 * constraints specified (such as person cannot be scheduled when on holiday, 
 * person can be scheduled when assigned to a task, person cannot be scheduled
 * too often.
 * 
 * It has several key components:
 * A) People 
 *    Stored as an array list. These should be set up first. This is the default 
 *    place to go to find which people are in the labour pool
 * B) Task Dates 
 *    Stored in a flex2DArray with tasks in the rows and dates in the columns.
 *    The dates are the dates that the task can be scheduled. The flex2DArray body
 *    has a "N" meaning that task cannot happen on the date and "Y" otherwise.
 *    The default value is "N" (ie you have to explicitly assign a task to a date)
 *    This data is used as the master source of dates and tasks for all other data
 *    structures.
 * C) Holidays
 *    Stored in a flex2DArray with people in the rows and dates in the columns.
 *    The dates are the dates that the person can be scheduled. The flex2DArray body
 *    has a "Y" meaning that person is available on the date and "N" otherwise.
 *    The default value is "Y" ie we assume that a person is not on holiday
 * D) Assignments
 *    Stored in a flex2DArray with people in the rows and tasks in the columns.
 *    The tasks are those that a person can do and have a "Y" in the array body.
 *    The default setting is that a task cannot be assigned to a person ie "N"
 * As can be seen the meaning of "Y" in an entry is "AVAILABLE"
 * @author user
 */
public class Ui extends javax.swing.JFrame {
    private String holidaysFile = Preferences.HOLIDAYS_FILE;
    private String assignmentsFile = Preferences.ASSIGNMENTS_FILE;
    private String scheduleFile = Preferences.SCHEDULE_FILE;    
    /**
     * Creates new form Ui
     */
    public Ui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        displayScheduleButton = new javax.swing.JButton();
        displayHolidaysButton = new javax.swing.JButton();
        displayTasksButton = new javax.swing.JButton();
        initialiseScheduleButton = new javax.swing.JButton();
        Exit = new javax.swing.JButton();
        calculateScheduleButton = new javax.swing.JButton();
        displayTaskDatesButton = new javax.swing.JButton();
        consistentButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        setMasterDataMenuItem = new javax.swing.JMenuItem();
        setTaskDatesMenuItem = new javax.swing.JMenuItem();
        setAssignmentsMenuItem = new javax.swing.JMenuItem();
        setHolidaysMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Schedule");

        outputTextArea.setEditable(false);
        outputTextArea.setColumns(20);
        outputTextArea.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        outputTextArea.setRows(5);
        jScrollPane1.setViewportView(outputTextArea);

        displayScheduleButton.setText("Initialise Schedule");
        displayScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initialiseScheduleAction(evt);
            }
        });

        displayHolidaysButton.setText("Display Schedule");
        displayHolidaysButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayScheduleAction(evt);
            }
        });

        displayTasksButton.setText("Display Holidays");
        displayTasksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayHolidaysAction(evt);
            }
        });

        initialiseScheduleButton.setText("Display Assignm'ts");
        initialiseScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayTasksAction(evt);
            }
        });

        Exit.setForeground(new java.awt.Color(255, 0, 51));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        calculateScheduleButton.setText("Calculate Schedule");
        calculateScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateScheduleButtonActionPerformed(evt);
            }
        });

        displayTaskDatesButton.setText("Display Task dates");
        displayTaskDatesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayTaskDatesButtonActionPerformed(evt);
            }
        });

        consistentButton.setText("Make Schedule Consistent");
        consistentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consistentButtonActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        setMasterDataMenuItem.setMnemonic('s');
        setMasterDataMenuItem.setText("Set People");
        setMasterDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setMasterDataMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(setMasterDataMenuItem);

        setTaskDatesMenuItem.setText("Set Task Dates");
        setTaskDatesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTaskDatesMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(setTaskDatesMenuItem);

        setAssignmentsMenuItem.setLabel("Set Assignments");
        setAssignmentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAssignmentsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(setAssignmentsMenuItem);

        setHolidaysMenuItem.setLabel("Set Holidays");
        setHolidaysMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setHolidaysMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(setHolidaysMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(displayScheduleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(displayHolidaysButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(displayTasksButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(initialiseScheduleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(calculateScheduleButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Exit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(displayTaskDatesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(consistentButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(displayTaskDatesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(initialiseScheduleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(displayTasksButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(displayHolidaysButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(calculateScheduleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(displayScheduleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(consistentButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                        .addComponent(Exit))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void initialiseScheduleAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initialiseScheduleAction
        Schedule s = new Schedule(Preferences.retrieveFlex2DArray(Preferences.TASK_DATE_FILE));
        Preferences.addFlex2DArray(Preferences.SCHEDULE_FILE, s.getSchedule());
    }//GEN-LAST:event_initialiseScheduleAction

    private void displayScheduleAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayScheduleAction
        try {
            outputTextArea.replaceRange("",0,outputTextArea.getLineEndOffset(outputTextArea.getLineCount()-1));
            flex2DArray f = Preferences.retrieveFlex2DArray(scheduleFile);
            LinkedList<String> L = f.print("|");
            for (String s : L) outputTextArea.append(s+System.getProperty( "line.separator" ));
        } catch (BadLocationException ex) {
            Logger.getLogger(Ui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_displayScheduleAction

    private void displayHolidaysAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayHolidaysAction
        try {
            outputTextArea.replaceRange("",0,outputTextArea.getLineEndOffset(outputTextArea.getLineCount()-1));
            flex2DArray f = Preferences.retrieveFlex2DArray(Preferences.HOLIDAYS_FILE);
            LinkedList<String> L = f.print("|");
            for (String s : L) outputTextArea.append(s+System.getProperty( "line.separator" ));
        } catch (BadLocationException ex) {
            Logger.getLogger(Ui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_displayHolidaysAction

    private void displayTasksAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayTasksAction
        try {
            outputTextArea.replaceRange("",0,outputTextArea.getLineEndOffset(outputTextArea.getLineCount()-1));
            flex2DArray f = Preferences.retrieveFlex2DArray(assignmentsFile);
            LinkedList<String> L = f.print("|");
            for (String s : L) outputTextArea.append(s+System.getProperty( "line.separator" ));
        } catch (BadLocationException ex) {
            Logger.getLogger(Ui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_displayTasksAction

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(getContentPane(),"Copyright Jon Waterhouse, 2012");
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void setMasterDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setMasterDataMenuItemActionPerformed
        PeopleDialog dialog = new PeopleDialog(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_setMasterDataMenuItemActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void setHolidaysMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setHolidaysMenuItemActionPerformed
        HolTaskDialog dialog;
        dialog = new HolTaskDialog(this, true,"Holidays");
        dialog.setVisible(true);
    }//GEN-LAST:event_setHolidaysMenuItemActionPerformed

    private void setAssignmentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAssignmentsMenuItemActionPerformed
        HolTaskDialog dialog;
        dialog = new HolTaskDialog(this, true,"Assignments");
        dialog.setVisible(true);
    }//GEN-LAST:event_setAssignmentsMenuItemActionPerformed

    private void calculateScheduleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateScheduleButtonActionPerformed
        Schedule s = new Schedule(Preferences.SCHEDULE_FILE);
        flex2DArray taskDates = Preferences.retrieveFlex2DArray(Preferences.TASK_DATE_FILE);
        TreeSet<String> dates = taskDates.getColKeys();
        TreeSet<String> tasks = taskDates.getRowKeys();
        ArrayList<String> people = Preferences.retrieve(Preferences.PEOPLE_FILE);
        flex2DArray holidays = Preferences.retrieveFlex2DArray(Preferences.HOLIDAYS_FILE);
        flex2DArray assignments = Preferences.retrieveFlex2DArray(Preferences.ASSIGNMENTS_FILE);
        ArrayList<abstractConstraint> constraints = new ArrayList();
        //Add the constraints in the order we want to evaluate them
        constraints.add(0, new taskConstraint(assignments)); // Is person assigned to task
        constraints.add(1, new TaskScheduledConstraint(taskDates)); //Is task scheduled on date
        constraints.add(2,new holConstraint(holidays)); // Is person on holiday
        constraints.add(3, new AlreadyScheduledConstraint());//Was person assigned anything else today
        constraints.add(4, new RepeatConstraint()); //Did person do same task recently
        s.calculate(constraints,dates,tasks,people);
        Preferences.addFlex2DArray(Preferences.SCHEDULE_FILE, s.getSchedule());
    }//GEN-LAST:event_calculateScheduleButtonActionPerformed

    private void setTaskDatesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setTaskDatesMenuItemActionPerformed
        TaskDialog dialog = new TaskDialog(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_setTaskDatesMenuItemActionPerformed

    private void displayTaskDatesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayTaskDatesButtonActionPerformed
        try {
            outputTextArea.replaceRange("",0,outputTextArea.getLineEndOffset(outputTextArea.getLineCount()-1));
            flex2DArray f = Preferences.retrieveFlex2DArray(Preferences.TASK_DATE_FILE);
            LinkedList<String> L = f.print("|");
            for (String s : L) outputTextArea.append(s+System.getProperty( "line.separator" ));
        } catch (BadLocationException ex) {
            Logger.getLogger(Ui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_displayTaskDatesButtonActionPerformed

    private void consistentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consistentButtonActionPerformed
        Preferences.enforceScheduleConsistency();
    }//GEN-LAST:event_consistentButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Ui().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Exit;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton calculateScheduleButton;
    private javax.swing.JButton consistentButton;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JButton displayHolidaysButton;
    private javax.swing.JButton displayScheduleButton;
    private javax.swing.JButton displayTaskDatesButton;
    private javax.swing.JButton displayTasksButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton initialiseScheduleButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JMenuItem setAssignmentsMenuItem;
    private javax.swing.JMenuItem setHolidaysMenuItem;
    private javax.swing.JMenuItem setMasterDataMenuItem;
    private javax.swing.JMenuItem setTaskDatesMenuItem;
    // End of variables declaration//GEN-END:variables
}
